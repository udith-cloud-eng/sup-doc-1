import {
  __commonJS
} from "./chunk-AUZ3RYOM.js";

// node_modules/kind-of/index.js
var require_kind_of = __commonJS({
  "node_modules/kind-of/index.js"(exports, module) {
    var toString = Object.prototype.toString;
    module.exports = function kindOf(val) {
      var type = typeof val;
      if (type === "undefined") {
        return "undefined";
      }
      if (val === null) {
        return "null";
      }
      if (val === true || val === false || val instanceof Boolean) {
        return "boolean";
      }
      if (type === "string" || val instanceof String) {
        return "string";
      }
      if (type === "number" || val instanceof Number) {
        return "number";
      }
      if (type === "function" || val instanceof Function) {
        if (typeof val.constructor.name !== "undefined" && val.constructor.name.slice(0, 9) === "Generator") {
          return "generatorfunction";
        }
        return "function";
      }
      if (typeof Array.isArray !== "undefined" && Array.isArray(val)) {
        return "array";
      }
      if (val instanceof RegExp) {
        return "regexp";
      }
      if (val instanceof Date) {
        return "date";
      }
      type = toString.call(val);
      if (type === "[object RegExp]") {
        return "regexp";
      }
      if (type === "[object Date]") {
        return "date";
      }
      if (type === "[object Arguments]") {
        return "arguments";
      }
      if (type === "[object Error]") {
        return "error";
      }
      if (type === "[object Promise]") {
        return "promise";
      }
      if (isBuffer(val)) {
        return "buffer";
      }
      if (type === "[object Set]") {
        return "set";
      }
      if (type === "[object WeakSet]") {
        return "weakset";
      }
      if (type === "[object Map]") {
        return "map";
      }
      if (type === "[object WeakMap]") {
        return "weakmap";
      }
      if (type === "[object Symbol]") {
        return "symbol";
      }
      if (type === "[object Map Iterator]") {
        return "mapiterator";
      }
      if (type === "[object Set Iterator]") {
        return "setiterator";
      }
      if (type === "[object String Iterator]") {
        return "stringiterator";
      }
      if (type === "[object Array Iterator]") {
        return "arrayiterator";
      }
      if (type === "[object Int8Array]") {
        return "int8array";
      }
      if (type === "[object Uint8Array]") {
        return "uint8array";
      }
      if (type === "[object Uint8ClampedArray]") {
        return "uint8clampedarray";
      }
      if (type === "[object Int16Array]") {
        return "int16array";
      }
      if (type === "[object Uint16Array]") {
        return "uint16array";
      }
      if (type === "[object Int32Array]") {
        return "int32array";
      }
      if (type === "[object Uint32Array]") {
        return "uint32array";
      }
      if (type === "[object Float32Array]") {
        return "float32array";
      }
      if (type === "[object Float64Array]") {
        return "float64array";
      }
      return "object";
    };
    function isBuffer(val) {
      return val.constructor && typeof val.constructor.isBuffer === "function" && val.constructor.isBuffer(val);
    }
  }
});

// node_modules/default-compare/index.js
var require_default_compare = __commonJS({
  "node_modules/default-compare/index.js"(exports, module) {
    "use strict";
    var typeOf = require_kind_of();
    module.exports = function defaultCompare(a, b, prop) {
      if (prop != null && typeOf(prop) !== "string") {
        throw new TypeError('expected "prop" to be undefined or a string');
      }
      var typeA = typeOf(a);
      var typeB = typeOf(b);
      if (prop) {
        if (typeA === "object") {
          a = a[prop];
          typeA = typeOf(a);
        }
        if (typeB === "object") {
          b = b[prop];
          typeB = typeOf(b);
        }
      }
      if (typeA === "null") {
        return typeB === "null" ? 0 : typeB === "undefined" ? -1 : 1;
      } else if (typeA === "undefined") {
        return typeB === "null" ? 1 : typeB === "undefined" ? 0 : 1;
      } else if (typeB === "null" || typeB === "undefined") {
        return -1;
      } else {
        return a < b ? -1 : a > b ? 1 : 0;
      }
    };
  }
});

// node_modules/get-value/index.js
var require_get_value = __commonJS({
  "node_modules/get-value/index.js"(exports, module) {
    module.exports = function(obj, prop, a, b, c) {
      if (!isObject(obj) || !prop) {
        return obj;
      }
      prop = toString(prop);
      if (a)
        prop += "." + toString(a);
      if (b)
        prop += "." + toString(b);
      if (c)
        prop += "." + toString(c);
      if (prop in obj) {
        return obj[prop];
      }
      var segs = prop.split(".");
      var len = segs.length;
      var i = -1;
      while (obj && ++i < len) {
        var key = segs[i];
        while (key[key.length - 1] === "\\") {
          key = key.slice(0, -1) + "." + segs[++i];
        }
        obj = obj[key];
      }
      return obj;
    };
    function isObject(val) {
      return val !== null && (typeof val === "object" || typeof val === "function");
    }
    function toString(val) {
      if (!val)
        return "";
      if (Array.isArray(val)) {
        return val.join(".");
      }
      return val;
    }
  }
});

// node_modules/array-sort/index.js
var require_array_sort = __commonJS({
  "node_modules/array-sort/index.js"(exports, module) {
    var defaultCompare = require_default_compare();
    var typeOf = require_kind_of();
    var get = require_get_value();
    function arraySort(arr, props, opts) {
      if (arr == null) {
        return [];
      }
      if (!Array.isArray(arr)) {
        throw new TypeError("array-sort expects an array.");
      }
      if (arguments.length === 1) {
        return arr.sort();
      }
      var args = flatten([].slice.call(arguments, 1));
      if (typeOf(args[args.length - 1]) === "object") {
        opts = args.pop();
      }
      return arr.sort(sortBy(args, opts));
    }
    function sortBy(props, opts) {
      opts = opts || {};
      return function compareFn(a, b) {
        var len = props.length, i = -1;
        var result;
        while (++i < len) {
          result = compare(props[i], a, b);
          if (result !== 0) {
            break;
          }
        }
        if (opts.reverse === true) {
          return result * -1;
        }
        return result;
      };
    }
    function compare(prop, a, b) {
      if (typeof prop === "function") {
        return prop(a, b, compare.bind(null, null));
      }
      if (prop && typeof a === "object" && typeof b === "object") {
        return compare(null, get(a, prop), get(b, prop));
      }
      return defaultCompare(a, b);
    }
    function flatten(arr) {
      return [].concat.apply([], arr);
    }
    module.exports = arraySort;
  }
});
export default require_array_sort();
/*! Bundled license information:

get-value/index.js:
  (*!
   * get-value <https://github.com/jonschlinkert/get-value>
   *
   * Copyright (c) 2014-2015, Jon Schlinkert.
   * Licensed under the MIT License.
   *)

array-sort/index.js:
  (*!
   * array-sort <https://github.com/jonschlinkert/array-sort>
   *
   * Copyright (c) 2015-2017, Jon Schlinkert.
   * Released under the MIT License.
   *)
*/
//# sourceMappingURL=array-sort.js.map
