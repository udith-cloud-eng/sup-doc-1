let TourStep = {
  template: `
<div class="tour-step" :id="'tourStep' + index" :ref="'tourStep' + index">
  This is a step! {{ index }}
</div>
  `,
  data() {
    return {
      test: 'Hello'
    }
  },
  mounted() {
    new Popper(this.step.el, this.$refs['tourStep' + this.index],
      {
        attachment: 'top right',
        targetAttachment: 'top left'
      })
  },
  props: ['index', 'step']
}

let TourComponent = {
  template: `
<div>
  <tour-step v-for="(step, index) in steps" :step="step" :key="index" :index="index"></tour-step>
</div>
  `,
  props: ['steps']
}

const VueTour = {
  // The install method is all that needs to exist on the plugin object.
  // It takes the global Vue object as well as user-defined options.
  install(Vue, options) {
    Vue.component('TourStep', TourStep)
    Vue.component('TourComponent', TourComponent)

    Vue.$tours = []
    Vue.$log = () => {
      console.log(Vue.$tours)
    }
    // We call Vue.mixin() here to inject functionality into all components.
    Vue.mixin({
      // Anything added to a mixin will be injected into all components.
      // In this case, the mounted() method runs when the component is added to the DOM.
      mounted() {
        console.log('Mounted!')
      }
    })

    //constructor
    Vue.Tour = function (name) {
      this.name = name
      this.steps = []

      Vue.$tours.push(this)

      this.addStep = function (el, ...params) {
        this.steps.push({ el, params })
      }
    }
  }
}

if (typeof window !== 'undefined' && window.Vue) {
  window.Vue.use(VueTour)
}